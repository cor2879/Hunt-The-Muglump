/**********************************************************************
 *  SilverbackMuglumpBehaviour.cs
 *  
 *  Copyright (c) 2021 Old School Games
 **********************************************************************/

namespace OldSchoolGames.HuntTheMuglump.Scripts.MonoBehaviours
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    using UnityEngine;
    using OldSchoolGames.HuntTheMuglump.Scripts.Components;
    using OldSchoolGames.HuntTheMuglump.Scripts.Utilities;

    [RequireComponent(typeof(MovementBehaviour))]
    [RequireComponent(typeof(HunterBehaviour))]
    [RequireComponent(typeof(ShakeBehaviour))]
    public class SilverbackMuglumpBehaviour : MuglumpBehaviour
    {
        /// <summary>
        /// The starting hit points
        /// </summary>
        [SerializeField, ReadOnly]
        private int startingHitPoints = 2;

        /// <summary>
        /// The current hit points
        /// </summary>
        [SerializeField, ReadOnly]
        private int hitPoints;

        /// <summary>
        /// The movement behaviour
        /// </summary>
        [SerializeField, ReadOnly]
        private MovementBehaviour movementBehaviour;

        [SerializeField, ReadOnly]
        private HunterBehaviour hunterBehaviour;

        [SerializeField, ReadOnly]
        private ShakeBehaviour shakeBehaviour;

        public override Statistic<int> KillCountStatistic => Statistic.SilverbackMuglumpsKilled;

        public override MuglumpType MuglumpType { get => MuglumpType.SilverbackMuglump; }

        /// <summary>
        /// Gets the movement behaviour.
        /// </summary>
        /// <value>
        /// The movement behaviour.
        /// </value>
        public MovementBehaviour MovementBehaviour
        {
            get
            {
                if (this.movementBehaviour == null)
                {
                    this.movementBehaviour = this.GetComponent<MovementBehaviour>();
                }

                return this.movementBehaviour;
            }
        }

        public override IList<string> MovementSounds { get => SoundClips.LargeMonsterFootsteps; }

        public override IList<string> IdleSounds { get => SoundClips.LargeBreathing; }

        public override bool IsTrapped
        {
            get => this.MovementBehaviour.IsTrapped;
            set => this.MovementBehaviour.IsTrapped = value;
        }

        /// <summary>
        /// Gets the HunterBehaviour.
        /// </summary>
        public HunterBehaviour HunterBehaviour
        {
            get
            {
                if (this.hunterBehaviour == null)
                {
                    this.hunterBehaviour = this.GetComponent<HunterBehaviour>();
                }

                return this.hunterBehaviour;
            }
        }

        public ShakeBehaviour ShakeBehaviour
        {
            get
            {
                if (this.shakeBehaviour == null)
                {
                    this.shakeBehaviour = this.GetComponent<ShakeBehaviour>();
                }

                return this.shakeBehaviour;
            }
        }

        /// <summary>
        /// Gets the hit points.
        /// </summary>
        /// <value>
        /// The hit points.
        /// </value>
        public int HitPoints
        {
            get { return this.hitPoints; }
            private set { this.hitPoints = value; }
        }

        /// <summary>
        /// Starts this instance.
        /// </summary>
        public void Start()
        {
            this.HitPoints = this.startingHitPoints;
        }

        /// <summary>
        /// Gets the message generated by this entity if the player enters a nearby room.
        /// </summary>
        /// <returns></returns>
        public override string GetMessage()
        {
            if (this.CurrentRoom.GetAdjacentRooms().Any(kvp => kvp.Value != null && kvp.Value == PlayerBehaviour.Instance.CurrentRoom))
            {
                return base.GetMessage();
            }

            return this.IsTrapped ? "I'm trapped" : StringContent.SilverbackMuglumpWarning;
        }

        /// <summary>
        /// Attempts to Kill this instance.  Whether or not the kill is successful may be determined
        /// by the implementation code of this method.
        /// </summary>
        /// <param name="options">The options.</param>
        public override void Kill(KillOptions options)
        {
            if (--this.HitPoints == 0)
            {
                if (options == null)
                {
                    options = new KillOptions();
                }

                if (options.OnKilled == null)
                {
                    options.OnKilled = this.SetBossFlag;
                }
                else
                {
                    var tempOnKilled = options.OnKilled;
                    options.OnKilled = () =>
                    {
                        tempOnKilled();
                        this.SetBossFlag();
                    };
                }

                base.Kill(options);
            }
            else
            {
                options?.OnKillUnsuccessful?.Invoke();

                if (this.Net == null && !this.IsTrapped && this.CanSmellPlayer())
                {
                    if (!CameraManager.IsFollowing(this.gameObject))
                    {
                        CameraManager.TransitionTo(this);
                    }

                    this.AttackPlayer();
                }
                else
                {
                    CameraManager.TransitionTo(PlayerBehaviour.Instance);
                }
            }
        }

        private void SetBossFlag()
        {
            if (this.IsBoss)
            {
                GameManager.Instance.HasDefeatedBoss = true;
            }
        }

        public void AttackPlayer()
        {
            if (!this.CurrentRoom.IsAdjacent(GameManager.Instance.Player.CurrentRoom))
            {
                return;
            }

            var roar = GameManager.Instance.SoundEffectManager.GetAudioClip(SoundClips.MonsterRoar);
            var parameters = new CoroutineParameters();

            parameters.StandardVolume = GameManager.Instance.SoundEffectManager.Volume;
            parameters.RoarDuration = roar.length * 0.8f;

            GameManager.Instance.SoundEffectManager.Volume *= 3;
            GameManager.Instance.SoundEffectManager.PlayAudioOnce(SoundClips.MonsterRoar);
            this.Animator.SetBool(Constants.IsRoaring, true);
            this.ShakeBehaviour.StartShake(parameters.RoarDuration, 0.7f);

            StartCoroutine(nameof(this.WaitForRoarThenAttack), parameters);
        }

        private IEnumerator WaitForRoarThenAttack(CoroutineParameters parameters)
        {
            var elapsed = 0.0f;

            while (parameters.RoarDuration - elapsed > 0.0f)
            {
                elapsed += Time.fixedDeltaTime;
                yield return new WaitForSeconds(Time.fixedDeltaTime);
            }

            GameManager.Instance.SoundEffectManager.Volume = parameters.StandardVolume;
            this.Animator.SetBool(Constants.IsRoaring, false);
            this.ShakeBehaviour.StopShake();
            this.HunterBehaviour.HuntThePlayer();
        }

        private class CoroutineParameters
        {
            public float RoarDuration { get; set; }

            public int StandardVolume { get; set; }
        }
    }
}
